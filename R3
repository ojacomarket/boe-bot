#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);
byte g_last_button_state = 0;
byte g_button_state = 0;
unsigned long g_last_debounce_time = 0;
unsigned long g_debounce_delay = 100;
uint16_t incomingData = 0;
/* Possibly unneeded variables */
bool g_online = false;
unsigned long g_last_command;
float g_distance_in_cm = 0;
bool g_repeat = true;
byte g_pin_states[] = {0, 0};
float distance = 0;
byte tempo = 250; // Initial song speed
//LCD variables
byte charcount = 0;
boolean secondline = false;
byte textCounter = 0;
long number1; // first number of the calculation,
// sent through the Serial monitor
// If you take a look, it's a long varible, so
// we're able to use big numbers
long number2; // second number sent through the SM
char sign; // create a char variable to store
// the calcuation signal.
int result; // result of the calculation

void setup() {
  lcd.begin(16, 2);
  Serial.begin(9600); // begins serial communications
}

void loop() {
  while (Serial.available() > 0) { // only enter while if Serial terminal is open
    number1 = Serial.parseInt(); // get number from terminal
    sign = Serial.read(); // get any symbol from terminal
    number2 = Serial.parseInt(); // get number from terminal
    calculate(); // arvuta input
    lcd.print(number1); // print to lcd
    lcd.print(sign);
    lcd.print(number2);
    lcd.setCursor(0, 1); // set cursor to next line
    if (result != -1) { // if sign is not + - / * then -1
      lcd.print("answer is ");
      lcd.print(result);
    }
    delay(3000); // answer dissapearing speed
    lcd.home(); // set cursor to 0,0 position
    lcd.clear(); // clear screen
  }
}

void calculate() { // calculation based on sign and return vastus
  switch (sign) {
    case '+' : // kui + siis sumeeri
      result = number1 + number2;
      break; // v2lja switch
    case '-' :
      result = number1 - number2;
      break;
    case '*' :
      result = number1 * number2;
      break;
    case '/' :
      result = number1 / number2;
      break;
    default :
      lcd.print("Vale input ");
      result = -1;
  }
}
